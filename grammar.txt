ident     : /[a-zA-Z_][a-zA-Z0-9_]*/ ;
int       : /-?[0-9]+/ ;
float     : /-?[0-9]+\.[0-9]+/ ;
character : /'(\\)?.'/ ;
stringlit : /"(\\.|[^"])*"/ ;
whitespace : /[ \f\n\r\t\v]*/ ;
comment   : /#(\\.|[^\n])*/ ;
eos       : (<comment> | '\n' | ';') ;

arrayAssignIndex : '[' <exp>? ']' ;
arrayAssign : <scopedIdent> <arrayAssignIndex>+ '=' <exp> ;
arrayIndex  : '[' <exp> ']' ;
arraySlice  : <scopedIdent> '[' <exp> ':' <exp> ']' ;
arrayInit   : '[' ( <exp> ( ',' <exp> )* )? ']' ;
range       : <factor> ".." <factor> ;

scopedIdent : <ident> ('.' <ident>)* ;

funCall   : <scopedIdent> '(' <exp>? (',' <exp>)* ')';

factor    : '(' <exp> ')'
          | <float>
          | <int>
          | <character>
          | <stringlit>
          | <arrayInit>
          ;

prec20    : <factor> | <ident> ;
prec19arrindex : '[' (<exp> (':' <exp>)?)? ']' ;
prec19arr : <prec20> <prec19arrindex>+ ;
prec19fun : <ident> '(' <exp>? (',' <exp>)* ')' ;
prec19mem : <prec20> "." <prec19> ;
prec19    : <prec19arr>
          | <prec19fun>
          | <prec19mem>
          | <prec20> ;
prec18    : <prec19> ;
prec17    : <prec18> ( "++" | "--" )* ;
prec16    : ( "!" | "~" | "+" | "-" | "++" | "--" | "typeof" )* <prec17> ;
prec15    : <prec16> ( ( "**" ) <exp> )? ;
prec14    : <prec15> ( ( "*" | "/" | "%" ) <prec15> )* ;
prec13    : <prec14> ( ( "+" | "-" ) <prec14> )* ;
prec12    : <prec13> ( ( "<<" | ">>" ) <prec13> )* ;
prec11    : <prec12> ( ( "<=" | "<" | ">=" | ">" | "in" | "instanceof" ) <prec12> )* ;
prec10    : <prec11> ( ( "==" | "!=" | "~==" | "!~==" ) <prec11> )* ;
prec09    : <prec10> ( "&" <prec10> )* ;
prec08    : <prec09> ( "^" <prec09> )* ;
prec07    : <prec08> ( "|" <prec08> )* ;
prec06    : <prec07> ( "&&" <prec07> )* ;
prec05    : <prec06> ( "||" <prec06> )* ;
prec04    : <prec05> ( ".." <prec05> )* ;
prec03    : <prec04> ( ( "=" | "+=" | "-=" | "**=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^="| "|=" ) <exp> )? ;
prec02    : <prec03> ;
prec01    : <prec02> ( "<.>" <prec02>)* ;
exp       : <prec01> ;

prec20stmt    : <factor> ;
prec19arrstmt : (<prec20stmt> | <ident> ) <prec19arrindex>+ ;
prec19funstmt : <ident> '(' <exp>? (',' <exp>)* ')' ;
prec19memstmt : <prec20stmt> "." <prec19> ;
prec19stmt    : <prec19arrstmt>
              | <prec19funstmt>
              | <prec19memstmt>
              | <prec20stmt> ;
prec18stmt    : <prec19stmt> ;
prec17stmt    : <prec18stmt> ( "++" | "--" )* ;
prec16stmt    : ( "!" | "~" | "+" | "-" | "++" | "--" | "typeof" )* <prec17stmt> ;
prec15stmt    : <prec16stmt> ( ( "**" ) <exp> )? ;
prec14stmt    : <prec15stmt> ( ( "*" | "/" | "%" ) <prec15> )* ;
prec13stmt    : <prec14stmt> ( ( "+" | "-" ) <prec14> )* ;
prec12stmt    : <prec13stmt> ( ( "<<" | ">>" ) <prec13> )* ;
prec11stmt    : <prec12stmt> ( ( "<=" | "<" | ">=" | ">" | "in" | "instanceof" ) <prec12> )* ;
prec10stmt    : <prec11stmt> ( ( "==" | "!=" | "~==" | "!~==" ) <prec11> )* ;
prec09stmt    : <prec10stmt> ( "&" <prec10> )* ;
prec08stmt    : <prec09stmt> ( "^" <prec09> )* ;
prec07stmt    : <prec08stmt> ( "|" <prec08> )* ;
prec06stmt    : <prec07stmt> ( "&&" <prec07> )* ;
prec05stmt    : <prec06stmt> ( "||" <prec06> )* ;
prec04stmt    : <prec05stmt> ( ".." <prec05> )* ;
prec03stmt    : <prec04stmt> ( ( "=" | "+=" | "-=" | "**=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^="| "|=" ) <exp> )?
              | <ident> ( "=" | "+=" | "-=" | "**=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^="| "|=" ) <exp> ;
prec02stmt    : <prec03stmt> ;
prec01stmt    : <prec02stmt> ( "<,>" <prec02>)* ;
expstmt       : <prec01stmt> ;

block     : <stmt>
          | <eos> <stmt>* "end" ;
doBlock   : <eos> <stmt>* ("end" | "loop")
          | <stmt> ("loop")
          ;
ifBlock   : <eos> <stmt>* ("end" | "else" <block>)
          | <stmt> ("else" <block>)?
          ;

decl      : <ident> ( '=' <exp>)? ;

asm       : "asm" <stringlit> ;

stmt      : "do" <doBlock> ("while" <exp> <eos>)?
          | "while" <exp> "do" <block>
          | "for" <ident> "in" <exp> "do" <block>
          | "if" <exp> "then" <ifBlock>
          | "var" <decl> ( ',' <decl> )* <eos>
          | "return" <exp>? <eos>
          | <asm> <eos>
          | <expstmt> <eos>
          | <comment>
          ;


args       : <ident>? (',' <ident>)* ;
function   : "function" <ident> '(' <args> ')' <eos> (<stmt> | <eos>)* "end" <eos> ;

import     : "import" <ident> ("as" (<ident> | "*") )? <eos> ;
imports    : (<import> | <comment> | <eos>)* ;

exportItem : <ident> ("as" (<ident>) )? ;
export     : "export" <exportItem> (',' <exportItem>)* <eos> ;
exports    : (<export> | <comment> | <eos>)* ;

sourcecode : /^/ <imports> <exports> (<function> | <stmt> | <eos>)* /$/;
