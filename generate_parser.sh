#!/bin/bash

# Generate parser string file
echo -e "// AUTOGENERATED FILE!\nchar $1[] = {\n" > $3
hexdump -v -e '" " 16/1 "  0x%02x, " "\n"' $2 | sed -e '$s/0x  ,//g' >> $3
echo -e "\n};\n" >> $3



TERMS=$(egrep -o "[a-zA-Z][a-zA-Z0-9]*\\s*:" $2 | egrep -o "[a-zA-Z][a-zA-Z0-9]*")
IFS=$'\n' TERMS=($TERMS)

# Generate parser h code
cat << EOF > $5
// AUTOGENERATED FILE!
#include "mpc/mpc.h"

#ifndef PARSER_$1
#define PARSER_$1

mpc_err_t * generate_parser_$1();
void cleanup_parser_$1();

EOF
for (( i=0; i<${#TERMS[@]}; i++ ))
do
    echo "extern mpc_parser_t *parser_${TERMS[$i]};" >> $5
done
echo -e "\n#endif" >> $5

# Generate parser c code
cat << EOF > $4
// AUTOGENERATED FILE!
#include "mpc/mpc.h"

extern char $1[];

EOF
for (( i=0; i<${#TERMS[@]}; i++ ))
do
    echo "mpc_parser_t *parser_${TERMS[$i]};" >> $4
done

echo -e "\nmpc_err_t * generate_parser_$1() {" >> $4
for (( i=0; i<${#TERMS[@]}; i++ ))
do
    echo "    parser_${TERMS[$i]} = mpc_new(\"${TERMS[$i]}\");" >> $4
done

echo -e "    return mpca_lang(MPCA_LANG_NEWLINE_SENSITIVE, $1, " >> $4
for (( i=0; i<${#TERMS[@]}; i++ ))
do
    echo "       parser_${TERMS[$i]}, " >> $4
done
echo -e "       NULL);" >> $4

cat << EOF >> $4
}

void cleanup_parser_$1() {
EOF
echo -e "    mpc_cleanup(${#TERMS[@]}" >> $4
for (( i=0; i<${#TERMS[@]}; i++ ))
do
    echo "        , parser_${TERMS[$i]}" >> $4
done
echo "    );" >> $4

echo "}" >> $4